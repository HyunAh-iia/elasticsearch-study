# 데이터 검색
- 문서는 색인 시 설정한 분석기에 의해 분석 과정을 거쳐 토큰으로 분리된다.
- 분석기는 색인 시점과 검색 시점에 사용 가능하다.
- 특정 문장이 검색어로 요청되면 분석기를 통해 분석된 토큰의 일치 여부를 판단해서 그 결과에 점수(Score)를 매긴다.
- 이를 기반으로 순서를 적용해 결과를 사용자에게 최종적으로 출력한다.

## 1. 검색 API

###검색 질의 표현 방식
- URI 검색 : HTTP GET 요청을 활용하는 방식으로 파라미터를 'key=value' 형태로 전달함
  ```
  HET movie_search/_search?q=prdYear:2018
  ```
- Request Body 검색 : HTTP 요청 시 Body에 검색할 컬럼과 검색어를 JSON 형태로 표현하여 전달함
  ```
  POST movie_search/_search
  {
    "query": {
      "term": { "prdYear": "2018" }
    }
  }
  ```
  
###URI 검색
  - 장점 :  Request Body 검색에 비해 단순하고 사용하기 편함, 웹브라우저를 이용한 빠른 테스트에 주로 이용됨
  - 단점 : 복잡한 질의문을 입력하기 힘들고 엘라스틱서치에서 제공하는 모든 검색 옵션을 사용할 수 없음
  - 주로 사용하는 파라미터
    - q : 검색을 수행할 쿼리 문자열의 조건 지정
    - df : 쿼리에 검색을 수행할 필드가 지정되지 않았을 경우 기본값으로 검색할 필드 지정
    - analyzer : 쿼리 문자열을 형태소 분석할 분석기 지정 (기본값은 매핑된 형태소 분석기)
    - analyze_wildcard : 접두어/와일드카드(*) 검색 활성화 여부 지정 (기본값은 false)
    - default_operator : 두 개 이상의 검색 조건이 쿼리 문자열에 포함된 경우 검색 조건 연산자를 설정 (기본값은 OR연산)
    - _source : 검색 결과에 문서 본문 포함 여부 지정 (기본값은 true)
    - sort : 검색 결과의 정렬 기준 필드 지정
    - from : 검색을 시작할 문서의 위치 설정
    - size : 반환할 검색 결과 개수 설정

###Request Body 검색
- JSON 형태로 작성하며, Query DSL 문법을 사용한다.

## 2. Query DSL 이해하기
###Query DSL 쿼리의 구조
- 기본적인 요청 구조
  ```
  {
    "size": 리턴받을 결과 지정 (기본값 10)
    "from": 몇 번쨰 문서부터 가져올 지 지정 (기본값 0)
    "timeout": 소요 시간. timeout 시간이 너무 짧으면 전체 샤드에서 timeout을 넘기지 않는 문서만 결과로 노출하기 때문에 결과의 일부만 가져올 수도 있다. (기본값 무한대)
    "_source" : { 검색 시 필요한 필드만 출력하고 싶을 때 사용 }
    "query": { 검색 조건문이 들어가는 공간 }
    "aggs" : { 통계 및 집계 }
    "sort" : { 문서 결과의 출력 순서 }
  }
  ```
- 기본적인 응답 구조
  ```
  {
    "took": 쿼리 실행 시간
    "timed_out": 쿼리 시간이 초과한 경우
    "_shards": {
      "total": 쿼리를 요청한 전체 샤드의 개수
      "successful": 검색 요청에 성공적으로 응답한 샤드 개수
      "failed": 응답 실패한 샤드 개수
    }
    "hits": {
      "total": 검색어에 매칭된 문서의 전체 개수
      "max_score": 일치하는 문서의 스코어 중 가장 높은 값
      "hits": [각 문서 정보와 스코어 값]
    }
  }
  ```

###Query DSL 쿼리와 필터
- 쿼리(Queries) 컨텍스트
    - 분석기에 의한 전문 분석이 필요한 경우
    - score 계산
    - 루씬 레벨에서 분석 과정을 거치므로 상대적으로 느림
    - 결과가 캐싱되지 않고 디스크 연산을 수행함
- 필터(Filters) 컨텍스트
    - 단순히 Yes/No로 판단할 수 있는 조건 검색의 경우
    - score 미계산
    - 엘라스틱서치 레벨에서 처리하여 상대적으로 빠름
    - 자주 사용되는 필터 결과는 내부적으로 캐싱하며, 기본적으로 메모리 연산을 수행함

- 대부분의 경우 쿼리 방식과 필터 방식 중 어떤 방식으로 질의를 표현하더라도 같은 결과를 얻을 수 있음
- 하지만 어떤 질의 방식을 사용하느냐에 따라 엘라스틱서치 내부 검색 과정이나 성능이 크게 달라지므로 가능한 용도에 맞게 사용해야함

###Query DSL의 주요 파라미터
1. Multi Index 검색
    - 기본적으로 모든 검색은 멀티 인덱스 및 멀티 타입 검색이다.
    - 이러한 특성으로 다수의 인덱스를 검색할 때도 한 번의 요청으로 검색 결과를 얻을 수 있다.
    - 특정 인덱스를 지정하여 검색할 수도 있다.
    - 검색 요청 시 인덱스 이름을 지정할 떄 "*" 와일드카드로 사용할 수 있다.
    - 예를 들어, 로그 인덱스의 이름이 "log-2020-04-18"의 형태라면 아래와 같이 조회 가능하다.
      ```
      POST /log-2020-04-*/_search
      ```
    
2. 쿼리 결과 페이징
    - from 파라미터 : 제공되는 문서의 시작
    - size 파라미터 : 문서의 개수
    - 엘라스틱서치는 RDB와 다르게 페이징된 해다 문서만 선택적으로 가져오는 것이 아니라 모든 데이터를 읽는다.
    - 예를 들어, 두 번째 페이지를 요청하더라도 첫번째 결과를 포함하여 문서를 읽어온다.
    - 설정된 페이지를 제공하기 위해서는 전체를 읽어서 사이즈만큼 필터링해서 제공하는 구조이다.
    - 페이지 번호가 높아질수록 쿼리 비용은 덩달아 높아질 수 밖에 없다.
  
3. 쿼리 결과 정렬
    - sort : 정렬을 위한 옵션으로 오름차순(asc), 내림차순(desc)을 제공함
  
4. _scoure 필드 필터링
    - 특정 필드만 검색 결과로 확인하고 싶을 때 사용
    - 네트워크 사용량을 줄여 응답 속도도 빠르게 할 수 있음
  
5. 범위 검색
    - 범위(Range)를 기반으로 한 쿼리 파라미터
    - lt : <
    - gt : >
    - lte : <=
    - gte : >=
    - ```
      POST moive_search/_search
      {
        "query": {
          "range": {
            "prdYear": {
              "gte": "2016",
              "lte": "2017"
            }
          }
        }
      }
      ```
      
6. operator 설정
    - 엘라스틱서치 검색 시 문장이 들어올 경우 기본적으로 OR 연산으로 동작함
    - operator 파라미터를 통해 and 연산 가능
    - ```
      ...
      "query": {
        "match": {
          "컬럼명": {
            "query": "검색어1 검색어2",
            "operator": "and"
          }
        }
      }
      ...
      ```
7. minimun_should_match 설정
    - 일반적으로 OR 연산을 수행할 경우 검색 결과가 너무 많아질 수 있음
    - 이 경우 텀의 개수가 몇 개 이상 매칭될 때만 검색 결과로 나오게 할 수 있다
    - 따라서 minimun_should_match 파라미터를 이용하면 OR 연산으로도 AND 연산과 비슷한 효과를 낼 수 있다
    - ```
      ...
      "query": {
        "match": {
          "컬럼명": {
            "query": "검색어1 검색어2",
            "minimun_should_match": 2
          }
        }
      }
      ...
      ```
      
8. fuzziness 설정
    - 단순한 값을 찾는 Match Query를 유사한 값을 찾는 Fuzzy Query로 변환할 수 있다.
    - 이는 레벤슈타인(Levenshtein) 편집 거리 알고리즘을 기반으로 문서의 필드값을 여러 변 변경하는 방식으로 동작한다.
    - 오차범위 값으로 0, 1, 2, AUTO 총 4가지 값을 사용할 수 있다.
    - 예를 들어 오차범위 값을 2로 설정한다면, 오차범위가 두 글자 이하인 검색 결과까지 포함해서 출력한다
    - 영어에는 유용하지만 한글에는 적용하기 어렵다.
    - 하지만 국내에서 영어를 많이 사용하므로 여러 가지 적용가능한 곳이 있어 알아두면 유용하다
    - 예를 들어, 영화 제목이 "Fly High"일 때 사용자가 실수로 "Fil High"라고 입력해도 검색이 되는 것이다.
    
9. boost 설정
    - 검색 시 가장 많이 사용하는 파라미터 중 하나이다.
    - 관련성이 높은 필드나 키워드에 가중치를 더 줄 수 있게 해준다.
    - 다음과 같이 설정이 가능하다.
      ```
      POST 인덱스명/_search
      {
        "query": {
          "multi_match": {
            "query": "Fly",
            "fields": [컬럼명1^3, 컬럼명2]
          }
        }
      }
      ```
    - 컬럼명1의 스코어에 가중치 값으로 3을 곱하게 된다.

## 3. Query DSL의 주요 쿼리

###Match All QUery
###Match Query
###Multi Match Query
###Term Query
###Bool Query
###Query String
###Prefix Query
###Exists Query
###Wildcard Query
###Nested Query

## 4. 부가적인 검색 API

###효율적인 검색을 위한 환경설정
###Search Shards API
###Multi Search API
###Count API
###Validate API
###Explain API
###Profile API
